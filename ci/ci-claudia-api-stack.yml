---
AWSTemplateFormatVersion: '2010-09-09'
Description: Pipeline to build API's using claudia inside a codebuild project
Parameters:
  ApplicationName:
    Type: String
    Description: Name of application from package.json
  LambdaExecutionRoleName:
    Type: String
    Description: Name of IAM role that will be created for executing the lambda functions
  GitHubUser:
    Type: String
    Description: GitHub User
  GitHubRepo:
    Type: String
    Description: GitHub Repo to pull from. Only the Name. not the URL
  GitHubBranch:
    Type: String
    Description: GitHub Branch
    Default: 'master'
  GitHubToken:
    NoEcho: true
    Type: String
    Description: Secret. It might look something like 9b189a1654643522561f7b3ebd44a1531a4287af OAuthToken with access to Repo. Go to https://github.com/settings/tokens
  BuildType:
    Type: String
    Default: 'LINUX_CONTAINER'
    Description: The build container type to use for building the app
  BuildComputeType:
    Type: String
    Default: 'BUILD_GENERAL1_SMALL'
    Description: The build compute type to use for building the app
  BuildImage:
    Type: String
    Default: 'aws/codebuild/nodejs:6.3.1'
    Description: The build image to use for building the app
  EmailAddress:
    Type: String
    Description: E-Mail address that will receive pipeline state notifications
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Resources
        Parameters:
          - ApplicationName
          - LambdaExecutionRoleName
      - Label:
          default: GitHub Configuration
        Parameters:
          - GitHubToken
          - GitHubUser
          - GitHubRepo
          - GitHubBranch
      - Label:
          default: Build Configuration
        Parameters:
          - BuildType
          - BuildComputeType
          - BuildImage
          - DeployImage
      - Label:
          default: Notifications
        Parameters:
          - EmailAddress
    ParameterLabels:
      ApplicationName:
        default: Application Name
      LambdaExecutionRoleName:
        default: Lambda Execution Role Name
      GitHubToken:
        default: GitHub OAuth2 Token
      GitHubUser:
        default: GitHub User/Org Name
      GitHubRepo:
        default: GitHub Repository Name
      GitHubBranch:
        default: GitHub Branch Name
      BuildType: 
        default: CodeBuild type
      BuildComputeType:
        default: CodeBuild instance type
      BuildImage:
        default: Build image
      EmailAddress:
        default: E-Mail Address
Resources:
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: !Join 
            - '-'
            - - !Ref LambdaExecutionRoleName
              - policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogStream'
                Resource:
                  - !Sub >-
                    arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${ApplicationName}:*:*
              - Effect: Allow
                Action:
                  - 'logs:PutLogEvents'
                Resource:
                  - !Sub >-
                    arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${ApplicationName}:*:*
              - Effect: Allow
                Action:
                  - 'dynamodb:DescribeTable'
                  - 'dynamodb:Query'
                  - 'dynamodb:Scan'
                  - 'dynamodb:GetItem'
                  - 'dynamodb:PutItem'
                  - 'dynamodb:UpdateItem'
                  - 'dynamodb:DeleteItem'
                Resource: !Sub 'arn:aws:dynamodb:${AWS::Region}:*:*'
              - Effect: Allow
                Action:
                  - 'xray:PutTraceSegments'
                  - 'xray:PutTelemetryRecords'
                Resource: '*'
      Path: /
      RoleName: !Ref LambdaExecutionRoleName
  PipelineBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
    Properties:
      LifecycleConfiguration:
        Rules:
          - ExpirationInDays: 1
            Status: Enabled
  ClaudiaUpdateBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
  SecretsBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
  CodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - codebuild.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: codebuild-service
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action: '*'
            Resource: '*'
          Version: '2012-10-17'
  CodePipelineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - codepipeline.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: codepipeline-service
        PolicyDocument:
          Statement:
          - Action:
            - codebuild:StartBuild
            - codebuild:BatchGetBuilds
            - codebuild:StopBuild
            Resource:
            - !GetAtt 'CodeBuildBuildAPI.Arn'
            Effect: Allow
          - Action:
            - s3:GetObject
            - s3:GetObjectVersion
            - s3:GetBucketVersioning
            - s3:PutObject
            Resource:
            - !Join
              - ''
              - - 'arn:aws:s3:::'
                - !Ref 'PipelineBucket'
            - !Join
              - ''
              - - 'arn:aws:s3:::'
                - !Ref 'PipelineBucket'
                - /*
            Effect: Allow
          Version: '2012-10-17'
  CodeBuildBuildAPI:
    Type: AWS::CodeBuild::Project
    DependsOn: [CodeBuildRole, LambdaExecutionRole]
    Properties:
      Name: !Sub ${AWS::StackName}-BuildAPI
      Description: Build API with npm and claudia
      ServiceRole: !GetAtt CodeBuildRole.Arn
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: !Ref BuildType
        ComputeType: !Ref BuildComputeType
        Image: !Sub ${BuildImage}
      Source:
        Type: CODEPIPELINE
        BuildSpec: !Sub 
          - |
            version: 0.2
            phases:
              install:
                commands:
                  - echo Install started on `date`
                  - npm install --save
              pre_build:
                commands:
                  - echo Get existing claudia config from S3 if it exists
                  - config_exists=$(aws s3 ls s3://${ClaudiaUpdateBucket}/claudia.json); echo ''
                  - if [ "$config_exists" ]; then aws s3 cp s3://${ClaudiaUpdateBucket}/claudia.json .; fi
                  - echo Get secret .env file
                  - aws s3 sync s3://${SecretsBucket} .
                  - echo Make script executable
                  - chmod +x bin/claudia-deploy.sh
              build:
                commands:
                  - echo Build started on `date`
                  - if [ -r claudia.json ]; then npm run update env.json; else npm run deploy env.json ${LocalLambdaExecutionRole}; fi
              post_build:
                commands:
                  - echo Build completed on `date`
                  - echo Store claudia config in S3
                  - aws s3 cp claudia.json s3://${ClaudiaUpdateBucket}/claudia.json
          - {
            LocalLambdaExecutionRole: !GetAtt LambdaExecutionRole.Arn
            }
      TimeoutInMinutes: 20
  Pipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      RoleArn: !GetAtt CodePipelineRole.Arn
      Stages:
      - Name: Source
        Actions:
        - InputArtifacts: []
          Name: Source
          ActionTypeId:
            Category: Source
            Owner: ThirdParty
            Version: '1'
            Provider: GitHub
          OutputArtifacts:
          - Name: SourceOutput
          Configuration:
            Owner: !Ref GitHubUser
            Repo: !Ref GitHubRepo
            Branch: !Ref GitHubBranch
            OAuthToken: !Ref GitHubToken
          RunOrder: 1
      - Name: Deploy
        Actions:
        - Name: NPM_Claudia_Deploy
          ActionTypeId:
            Category: Build
            Owner: AWS
            Version: '1'
            Provider: 'CodeBuild'
          InputArtifacts:
          - Name: SourceOutput
          OutputArtifacts:
          - Name: BuildOutput
          Configuration:
            ProjectName: !Ref CodeBuildBuildAPI
          RunOrder: 1
      ArtifactStore:
        Type: S3
        Location: !Ref PipelineBucket
  PipelineStateSNSTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      PolicyDocument:
        Id: CloudWatchPublishPolicy
        Version: '2012-10-17'
        Statement:
        - Sid: CloudWatchPublishPolicy
          Effect: Allow
          Principal:
            Service: events.amazonaws.com
          Action: sns:Publish
          Resource: !Ref DeveloperNotification
      Topics:
        - !Ref DeveloperNotification
  DeveloperNotification:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
      - Endpoint: !Ref EmailAddress
        Protocol: email
  PipelineEventRule: 
    Type: AWS::Events::Rule
    Properties: 
      Description: Send a notification about the pipeline state
      EventPattern: 
        source:
        - aws.codepipeline
        detail-type:
        - CodePipeline Pipeline Execution State Change
        detail:
          state:
          - STARTED
          - SUCCEEDED
          - RESUMED
          - FAILED
          - CANCELED
          - SUPERSEDED
          pipeline:
          - !Ref Pipeline
      State: ENABLED
      Targets: 
        - Arn: !Ref 'DeveloperNotification'
          Id: Pipeline_State_Notification
          InputTransformer:
            InputTemplate: !Sub '"The Pipeline <pipeline> has <state>. Additional details can be reviewed at https://console.aws.amazon.com/codepipeline/home?region=${AWS::Region}#/view/${Pipeline}."'
            InputPathsMap:
              pipeline: $.detail.pipeline
              state: $.detail.state
Outputs:
  PipelineUrl:
    Value: !Sub https://console.aws.amazon.com/codepipeline/home?region=${AWS::Region}#/view/${Pipeline}
    Description: CodePipeline URL
  SecretsBucket:
    Value: !Sub s3://${SecretsBucket}
    Description: Secrets Bucket