---
AWSTemplateFormatVersion: '2010-09-09'
Description: This stack creates two pipelines to deploy a react application to a dev environment, and after manual approval, to a prod environment.
Parameters:
  CloudFrontNamePROD:
    Type: String
    Description: Full domain name for PROD site on cloudfront. Should look something like test.contoso.com. Will require creation of a CNAME record to resolve.
  CloudFrontNameDEV:
    Type: String
    Description: Full domain name for DEV site on cloudfront. Should look something like test.contoso.com. Will require creation of a CNAME record to resolve.
  ValidationDomain:
    Type: String
    Description: FQDN for domain validation. Providing an argument to the parameter will cause an AWS cert to be requested. See https://docs.aws.amazon.com/acm/latest/APIReference/API_DomainValidationOption.html
  AcmCertificateArnPROD:
    Type: String
    Description: Use this if you have imported your own SSL certificate for PROD. This ID is the Amazon Resource Name (ARN) of an AWS Certificate Manager (ACM) certificate.
  AcmCertificateArnDEV:
    Type: String
    Description: Use this if you have imported your own SSL certificate for DEV. This ID is the Amazon Resource Name (ARN) of an AWS Certificate Manager (ACM) certificate.
  MinimumProtocolVersion:
    Type: String
    Description: See https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/secure-connections-supported-viewer-protocols-ciphers.html#secure-connections-supported-ciphers
    Default: TLSv1.1_2016
    AllowedValues:
      - SSLv3
      - TLSv1.0
      - TLSv1_2016
      - TLSv1.1_2016
      - TLSv1.2_2018
  CloudFrontPriceClass:
    Type: String
    Description: Price class to use for cloudfront distributions.
    Default: PriceClass_100
    AllowedValues:
      - PriceClass_100
      - PriceClass_200
      - PriceClass_300
  GitHubUser:
    Type: String
    Description: GitHub User
  GitHubRepo:
    Type: String
    Description: GitHub Repo to pull from. Only the Name. not the URL
  GitHubBranchDEV:
    Type: String
    Description: GitHub Branch
    Default: 'dev'
  GitHubBranchPROD:
    Type: String
    Description: GitHub Branch
    Default: 'master'
  GitHubToken:
    NoEcho: true
    Type: String
    Description: Secret. It might look something like 9b189a1654643522561f7b3ebd44a1531a4287af OAuthToken with access to Repo. Go to https://github.com/settings/tokens
  BuildType:
    Type: String
    Default: 'LINUX_CONTAINER'
    Description: The build container type to use for building the app
  BuildComputeType:
    Type: String
    Default: 'BUILD_GENERAL1_SMALL'
    Description: The build compute type to use for building the app
  BuildImage:
    Type: String
    Default: 'aws/codebuild/nodejs:6.3.1'
    Description: The build image to use for building the app
  EmailAddress:
    Type: String
    Description: E-Mail address that will receive pipeline state notifications and dev to prod approval requests.
Conditions:
  UseCustomDomainNameDEV: !Not [!Equals [!Ref CloudFrontNameDEV, '']]
  UseCustomDomainNamePROD: !Not [!Equals [!Ref CloudFrontNamePROD, '']]
  RequestCertDEV: !And [!Not [!Equals [!Ref ValidationDomain, '']], !Not [!Equals [!Ref CloudFrontNameDEV, '']]]
  RequestCertPROD: !And [!Not [!Equals [!Ref ValidationDomain, '']], !Not [!Equals [!Ref CloudFrontNamePROD, '']]]
  UseExistingCertDEV: !And [!Not [!Equals [!Ref AcmCertificateArnDEV, '']], !Not [!Equals [!Ref CloudFrontNameDEV, '']]]
  UseExistingCertPROD: !And [!Not [!Equals [!Ref AcmCertificateArnPROD, '']], !Not [!Equals [!Ref CloudFrontNamePROD, '']]]
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Site Configuration
        Parameters:
          - CloudFrontNamePROD
          - CloudFrontNameDEV
          - ValidationDomain
          - AcmCertificateArnPROD
          - AcmCertificateArnDEV
          - MinimumProtocolVersion
          - CloudFrontPriceClass
      - Label:
          default: GitHub Configuration
        Parameters:
          - GitHubToken
          - GitHubUser
          - GitHubRepo
          - GitHubBranchDEV
          - GitHubBranchPROD
      - Label:
          default: Build Configuration
        Parameters:
          - BuildType
          - BuildComputeType
          - BuildImage
      - Label:
          default: Notifications
        Parameters:
          - EmailAddress
    ParameterLabels:
      CloudFrontNamePROD:
        default: Domain for PROD environment in cloudfront [Optional]
      CloudFrontNameDEV:
        default: Domain for DEV environment in cloudfront [Optional]
      ValidationDomain:
        default: FQDN for domain validation [Optional]
      AcmCertificateArnPROD:
        default: SSL Certificate for PROD in ACM [Optional]
      AcmCertificateArnDEV:
        default: SSL Certificate for DEV in ACM [Optional]
      MinimumProtocolVersion:
        default: Minimum SSL/TLS Protocol Version
      CloudFrontPriceClass:
        default: Price class for cloudfront distribution
      GitHubToken:
        default: GitHub OAuth2 Token
      GitHubUser: 
        default: GitHub User/Org Name
      GitHubRepo: 
        default: GitHub Repository Name
      GitHubBranchDEV: 
        default: GitHub Branch Name for Dev
      GitHubBranchPROD:
        default: GitHub Branch Name for Prod
      BuildType: 
        default: CodeBuild type
      BuildComputeType: 
        default: CodeBuild instance type
      BuildImage: 
        default: Build image
      EmailAddress:
        default: E-Mail Address
Resources:
  CodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - codebuild.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: codebuild-service
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action: '*'
            Resource: '*'
          Version: '2012-10-17'
  CodePipelineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - codepipeline.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: codepipeline-service
        PolicyDocument:
          Statement:
          - Action:
            - codebuild:StartBuild
            - codebuild:BatchGetBuilds
            - codebuild:StopBuild
            Resource:
            - !GetAtt 'CodeBuildPROD.Arn'
            - !GetAtt 'CodeBuildDEV.Arn'
            Effect: Allow
          - Action:
            - s3:GetObject
            - s3:GetObjectVersion
            - s3:GetBucketVersioning
            - s3:PutObject
            Resource:
            - !Join
              - ''
              - - 'arn:aws:s3:::'
                - !Ref 'PipelineBucket'
            - !Join
              - ''
              - - 'arn:aws:s3:::'
                - !Ref 'PipelineBucket'
                - /*
            Effect: Allow
          - Action:
            - sns:Publish
            Resource:
            - !Ref DeveloperNotification
            Effect: Allow
          Version: '2012-10-17'
  WebsiteBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
    Properties:
      BucketName:
        !Join
          - '-'
          - - !Ref AWS::StackName
            - 'website'
  SecretsBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
    Properties:
      BucketName:
        !Join 
          - '-'
          - - !Ref AWS::StackName
            - 'secrets'
  PipelineBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
    Properties:
      LifecycleConfiguration:
        Rules:
          - ExpirationInDays: 1
            Status: Enabled
      BucketName:
        !Join
          - '-'
          - - !Ref AWS::StackName
            - 'pipeline'
  CodeBuildDEV:
    Type: AWS::CodeBuild::Project
    DependsOn: CodeBuildRole
    Properties:
      Name: !Sub ${AWS::StackName}-codebuild-dev
      Description: Build and deploy dev
      ServiceRole: !GetAtt CodeBuildRole.Arn
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: !Ref BuildType
        ComputeType: !Ref BuildComputeType
        Image: !Sub ${BuildImage}
        EnvironmentVariables:
          - Name: CloudFrontDistributionId
            Value: !Ref CloudFrontDistributionDEV
      Source:
        Type: CODEPIPELINE
        BuildSpec: !Sub |
          version: 0.1
          phases:
            install:
              commands:
                - echo Install started on `date`
                - npm install --save --save-exact
            pre_build:
              commands:
                - aws s3 sync s3://${SecretsBucket}/dev .
            build:
              commands:
                - echo Build started on `date`
                - npm run build
                - echo Deploying site to S3
                - aws s3 sync ./build s3://${AWS::StackName}-website/dev --delete --acl public-read
                - aws s3 cp ./build/index.html s3://${AWS::StackName}-website/dev/index.html --cache-control 'no-cache, no-store, must-revalidate' --acl public-read
                - aws s3 cp ./build/asset-manifest.json s3://${AWS::StackName}-website/dev/asset-manifest.json --cache-control 'no-cache, no-store, must-revalidate' --acl public-read
                - aws s3 cp ./build/service-worker.js s3://${AWS::StackName}-website/dev/service-worker.js --cache-control 'no-cache, no-store, must-revalidate' --acl public-read
                - echo Invalidating all files in cloudfront cache
                - aws cloudfront create-invalidation --distribution-id $CloudFrontDistributionId --paths '/*'
            post_build:
              commands:
                - echo Build completed on `date`                
          artifacts:
            files:
              - '**/*'
      TimeoutInMinutes: 30            
  CodeBuildPROD:
    Type: AWS::CodeBuild::Project
    DependsOn: CodeBuildRole
    Properties:
      Name: !Sub ${AWS::StackName}-codebuild-prod
      Description: Build and deploy prod
      ServiceRole: !GetAtt CodeBuildRole.Arn
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: !Ref BuildType
        ComputeType: !Ref BuildComputeType
        Image: !Sub ${BuildImage}
        EnvironmentVariables:
          - Name: CloudFrontDistributionId
            Value: !Ref CloudFrontDistributionPROD
      Source:
        Type: CODEPIPELINE
        BuildSpec: !Sub |
          version: 0.2
          phases:
            install:
              commands:
                - echo Install started on `date`
                - npm install --save --save-exact
            pre_build:
              commands:
                - aws s3 sync s3://${SecretsBucket}/prod .
            build:
              commands:
                - echo Build started on `date`
                - npm run build
                - echo Deploying site to S3
                - aws s3 sync ./build s3://${AWS::StackName}-website/prod --delete --acl public-read
                - aws s3 cp ./build/index.html s3://${AWS::StackName}-website/prod/index.html --cache-control 'no-cache, no-store, must-revalidate' --acl public-read
                - aws s3 cp ./build/asset-manifest.json s3://${AWS::StackName}-website/dev/asset-manifest.json --cache-control 'no-cache, no-store, must-revalidate' --acl public-read
                - aws s3 cp ./build/service-worker.js s3://${AWS::StackName}-website/dev/service-worker.js --cache-control 'no-cache, no-store, must-revalidate' --acl public-read
                - echo Invalidating all files in cloudfront cache
                - aws cloudfront create-invalidation --distribution-id $CloudFrontDistributionId --paths '/*'
            post_build:
              commands:
                - echo Build completed on `date`
          artifacts:
            files:
              - '**/*'
      TimeoutInMinutes: 30
  PipelineDEV:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: 
        !Join
          - '-'
          - - !Ref AWS::StackName
            - 'pipeline'
            - 'dev'
      RoleArn: !GetAtt CodePipelineRole.Arn
      Stages:
      - Name: Source
        Actions:
        - InputArtifacts: []
          Name: Source
          ActionTypeId:
            Category: Source
            Owner: ThirdParty
            Version: '1'
            Provider: GitHub
          OutputArtifacts:
          - Name: SourceOutput
          Configuration:
            Owner: !Ref GitHubUser
            Repo: !Ref GitHubRepo
            Branch: !Ref GitHubBranchDEV
            OAuthToken: !Ref GitHubToken
          RunOrder: 1
      - Name: Build_Deploy_Dev
        Actions:
        - Name: NPM_Build
          ActionTypeId:
            Category: Build
            Owner: AWS
            Version: '1'
            Provider: 'CodeBuild'
          InputArtifacts:
          - Name: SourceOutput
          OutputArtifacts:
          - Name: BuildDevOutput
          Configuration:
            ProjectName: !Ref CodeBuildDEV
          RunOrder: 1
      ArtifactStore:
        Type: S3
        Location: !Ref PipelineBucket
  PipelinePROD:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: 
        !Join
          - '-'
          - - !Ref AWS::StackName
            - 'pipeline'
            - 'prod'
      RoleArn: !GetAtt CodePipelineRole.Arn
      Stages:
      - Name: Source
        Actions:
        - InputArtifacts: []
          Name: Source
          ActionTypeId:
            Category: Source
            Owner: ThirdParty
            Version: '1'
            Provider: GitHub
          OutputArtifacts:
          - Name: SourceOutput
          Configuration:
            Owner: !Ref GitHubUser
            Repo: !Ref GitHubRepo
            Branch: !Ref GitHubBranchPROD
            OAuthToken: !Ref GitHubToken
          RunOrder: 1
      - Name: Build_Deploy_Dev
        Actions:
        - Name: NPM_Build
          ActionTypeId:
            Category: Build
            Owner: AWS
            Version: '1'
            Provider: 'CodeBuild'
          InputArtifacts:
          - Name: SourceOutput
          OutputArtifacts:
          - Name: BuildDevOutput
          Configuration:
            ProjectName: !Ref CodeBuildDEV
          RunOrder: 1
      - Name: ProdApproval
        Actions:
        - Name: Approve
          ActionTypeId:
            Category: Approval
            Owner: AWS
            Version: 1
            Provider: Manual
          Configuration:
            NotificationArn: !Ref DeveloperNotification
            CustomData: Approve new deployment of site in production.
          RunOrder: 1
      - Name: Build_Deploy_PROD
        Actions:
        - Name: NPM_Build
          ActionTypeId:
            Category: Build
            Owner: AWS
            Version: '1'
            Provider: 'CodeBuild'
          InputArtifacts:
          - Name: SourceOutput
          OutputArtifacts:
          - Name: BuildProdOutput
          Configuration:
            ProjectName: !Ref CodeBuildPROD
          RunOrder: 1
      ArtifactStore:
        Type: S3
        Location: !Ref PipelineBucket
  DeveloperNotificationSNSTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      PolicyDocument:
        Id: DeveloperNotificationPublishPolicy
        Version: '2012-10-17'
        Statement:
        - Sid: DeveloperNotificationPublishPolicy
          Effect: Allow
          Principal:
            Service: 
              - events.amazonaws.com
              - codepipeline.amazonaws.com
          Action: sns:Publish
          Resource: !Ref DeveloperNotification
      Topics:
        - !Ref DeveloperNotification
  DeveloperNotification:
    Type: AWS::SNS::Topic
    Properties:
      TopicName:
        !Join
          - '-'
          - - !Ref AWS::StackName
            - 'DeveloperNotification'
      Subscription:
      - Endpoint: !Ref EmailAddress
        Protocol: email
  PipelineEventRule: 
    Type: AWS::Events::Rule
    Properties:
      Name:
        !Join
          - '-'
          - - !Ref AWS::StackName
            - 'PipelineEventRule'
      Description: Send a notification about the pipeline state
      EventPattern: 
        source:
        - aws.codepipeline
        detail-type:
        - CodePipeline Pipeline Execution State Change
        detail:
          state:
          - STARTED
          - SUCCEEDED
          - RESUMED
          - FAILED
          - CANCELED
          - SUPERSEDED
          pipeline:
          - !Ref PipelineDEV
          - !Ref PipelinePROD
      State: ENABLED
      Targets: 
        - Arn: !Ref 'DeveloperNotification'
          Id: Pipeline_State_Notification
          InputTransformer:
            InputTemplate: !Sub '"The pipeline <pipeline> has <state>. Additional details can be reviewed at https://console.aws.amazon.com/codepipeline/home?region=${AWS::Region}#/view/<pipeline>."'
            InputPathsMap:
              pipeline: $.detail.pipeline
              state: $.detail.state
  DeploymentEventRuleDEV:
    Type: AWS::Events::Rule
    Properties:
      Name:
        !Join
          - '-'
          - - !Ref AWS::StackName
            - 'DeploymentEventRule'
            - 'DEV'
      Description: Send a notification when the DEV site is successfully deployed
      EventPattern:
        source:
        - aws.codebuild
        detail-type:
        - CodeBuild Build State Change
        detail:
          build-status:
            - SUCCEEDED
          project-name:
          - !Ref CodeBuildDEV
      State: ENABLED
      Targets:
        - Arn: !Ref 'DeveloperNotification'
          Id: CodeBuild_Deploy_NotificationDEV
          Input:
            !Join
              - ''
              - - '"'
                - 'The DEV site has been updated. URL: '
                - !Join
                  - ''
                  - - 'https://'
                    - !GetAtt [CloudFrontDistributionDEV, DomainName]
                    - '/dev'
                - !If 
                  - UseCustomDomainNameDEV
                  - !Join 
                    - ' '
                    - - ''
                      - 'Alternative URL:'
                      - !Join
                        - ''
                        - - 'https://'
                          - !Ref CloudFrontNameDEV
                  - !Ref 'AWS::NoValue'
                - '"'
  DeploymentEventRulePROD:
    Type: AWS::Events::Rule
    Properties:
      Name:
        !Join
          - '-'
          - - !Ref AWS::StackName
            - 'DeploymentEventRule'
            - 'PROD'
      Description: Send a notification when the PROD site is successfully deployed
      EventPattern:
        source:
        - aws.codebuild
        detail-type:
        - CodeBuild Build State Change
        detail:
          build-status:
            - SUCCEEDED
          project-name:
          - !Ref CodeBuildPROD
      State: ENABLED
      Targets:
        - Arn: !Ref 'DeveloperNotification'
          Id: CodeBuild_Deploy_NotificationPROD
          Input:
            !Join
              - ''
              - - '"'
                - 'The PRODUCTION site has been updated. URL: '
                - !Join
                  - ''
                  - - 'https://'
                    - !GetAtt [CloudFrontDistributionPROD, DomainName]
                - !If 
                  - UseCustomDomainNamePROD
                  - !Join 
                    - ' '
                    - - ''
                      - 'Alternative URL:'
                      - !Join
                        - ''
                        - - 'https://'
                          - !Ref CloudFrontNamePROD
                  - !Ref 'AWS::NoValue'
                - '"'
  CloudFrontOriginAccessIdentityDEV:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment:
          !Join
            - ''
            - - 'Used to retrieve content from '
              - !Ref AWS::StackName
              - '/dev'
  CloudFrontOriginAccessIdentityPROD:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: 
          !Join
            - ''
            - - 'Used to retrieve content from '
              - !Ref AWS::StackName
              - '/prod'
  WebsiteBucketCloudFrontPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref WebsiteBucket
      PolicyDocument:
        Statement:
          - Sid: 'CloudFrontGetObject-DEV'
            Action: 
            - s3:GetObject
            Effect: Allow
            Resource:
              - !Join
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref WebsiteBucket
              - !Join
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref WebsiteBucket
                  - '/dev'
              - !Join
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref WebsiteBucket
                  - '/dev/*'
            Principal:
              AWS:
                !Join
                  - ' '
                  - - 'arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity'
                    - !Ref CloudFrontOriginAccessIdentityDEV
          - Sid: 'CloudFrontGetObject-PROD'
            Action: 
            - s3:GetObject
            Effect: Allow
            Resource:
              - !Join
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref WebsiteBucket
              - !Join
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref WebsiteBucket
                  - '/prod'
              - !Join
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref WebsiteBucket
                  - '/prod/*'
            Principal:
              AWS:
                !Join
                  - ' '
                  - - 'arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity'
                    - !Ref CloudFrontOriginAccessIdentityPROD
  CloudFrontDistributionDEV:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Comment: cphb-events DEV environment
        DefaultRootObject: index.html
        CustomErrorResponses:
          - ErrorCachingMinTTL: 86400
            ErrorCode: 403
            ResponseCode: 200
            ResponsePagePath: /index.html
          - ErrorCachingMinTTL: 86400
            ErrorCode: 404
            ResponseCode: 200
            ResponsePagePath: /index.html
        Aliases:
          - !If [UseCustomDomainNameDEV, !Ref CloudFrontNameDEV, !Ref 'AWS::NoValue']
        DefaultCacheBehavior:
          Compress: True
          ForwardedValues:
            QueryString: False
            Cookies:
              Forward: none
          TargetOriginId:
            !Join
              - '/'
              - - !Ref AWS::StackName
                - 'dev'
          ViewerProtocolPolicy: redirect-to-https
        Enabled: True
        Origins:
          - DomainName: !GetAtt WebsiteBucket.DomainName
            OriginPath: '/dev'
            Id:
              !Join
                - '/'
                - - !Ref AWS::StackName
                  - 'dev'
            S3OriginConfig:
              OriginAccessIdentity:
                !Join
                  - '/'
                  - - 'origin-access-identity'
                    - 'cloudfront'
                    - !Ref CloudFrontOriginAccessIdentityDEV
        PriceClass: !Ref CloudFrontPriceClass
        ViewerCertificate:
          !If
            - UseExistingCertDEV
            - AcmCertificateArn: !Ref AcmCertificateArnDEV
              SslSupportMethod: sni-only
              MinimumProtocolVersion: !Ref MinimumProtocolVersion
            - !If
              - RequestCertDEV
              - AcmCertificateArn: !Ref CertDEV
                SslSupportMethod: sni-only
                MinimumProtocolVersion: !Ref MinimumProtocolVersion
              - CloudFrontDefaultCertificate: True
                MinimumProtocolVersion: !Ref MinimumProtocolVersion
  CloudFrontDistributionPROD:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Comment: cphb-events PROD environment
        DefaultRootObject: index.html
        CustomErrorResponses:
          - ErrorCachingMinTTL: 86400
            ErrorCode: 403
            ResponseCode: 200
            ResponsePagePath: /index.html
          - ErrorCachingMinTTL: 86400
            ErrorCode: 404
            ResponseCode: 200
            ResponsePagePath: /index.html
        Aliases:
          - !If [UseCustomDomainNamePROD, !Ref CloudFrontNamePROD, !Ref 'AWS::NoValue']
        DefaultCacheBehavior:
          Compress: True
          ForwardedValues:
            QueryString: False
            Cookies:
              Forward: none
          TargetOriginId:
            !Join
              - '/'
              - - !Ref AWS::StackName
                - 'prod'
          ViewerProtocolPolicy: redirect-to-https
        Enabled: True
        Origins:
          - DomainName: !GetAtt WebsiteBucket.DomainName
            OriginPath: '/prod'
            Id:
              !Join
                - '/'
                - - !Ref AWS::StackName
                  - 'prod'
            S3OriginConfig:
              OriginAccessIdentity:
                !Join
                  - '/'
                  - - 'origin-access-identity'
                    - 'cloudfront'
                    - !Ref CloudFrontOriginAccessIdentityPROD
        PriceClass: !Ref CloudFrontPriceClass
        ViewerCertificate:
          !If
            - UseExistingCertPROD
            - AcmCertificateArn: !Ref AcmCertificateArnPROD
              SslSupportMethod: sni-only
              MinimumProtocolVersion: !Ref MinimumProtocolVersion
            - !If
              - RequestCertPROD
              - AcmCertificateArn: !Ref CertPROD
                SslSupportMethod: sni-only
                MinimumProtocolVersion: !Ref MinimumProtocolVersion
              - CloudFrontDefaultCertificate: True
                MinimumProtocolVersion: !Ref MinimumProtocolVersion
  CertDEV:
    Type: AWS::CertificateManager::Certificate
    Condition: RequestCertDEV
    Properties:
      DomainName: !Ref CloudFrontNameDEV
      DomainValidationOptions:
        - DomainName: !Ref CloudFrontNameDEV
          ValidationDomain: !Ref ValidationDomain
  CertPROD:
    Type: AWS::CertificateManager::Certificate
    Condition: RequestCertPROD
    Properties:
      DomainName: !Ref CloudFrontNamePROD
      DomainValidationOptions:
        - DomainName: !Ref CloudFrontNamePROD
          ValidationDomain: !Ref ValidationDomain          
Outputs:
  PipelineUrlDEV:
    Value: !Sub https://console.aws.amazon.com/codepipeline/home?region=${AWS::Region}#/view/${PipelineDEV}
    Description: CodePipeline URL
  PipelineUrlPROD:
    Value: !Sub https://console.aws.amazon.com/codepipeline/home?region=${AWS::Region}#/view/${PipelinePROD}
    Description: CodePipeline URL
  UrlDEV:
    Value: 
      !Join
        - ''
        - - 'https://'
          - !GetAtt [CloudFrontDistributionDEV, DomainName]
    Description: DEV Website URL
  UrlPROD:
    Value: 
      !Join
        - ''
        - - 'https://'
          - !GetAtt [CloudFrontDistributionPROD, DomainName]
    Description: PROD Website URL
