---
# Copyright 2018 widdix GmbH
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
AWSTemplateFormatVersion: '2010-09-09'
Description: 'WordPress: fault tolerant and scalable, a cloudonaut.io template'
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
    - Label:
        default: 'Parent Stacks'
      Parameters:
      - ParentSSHBastionStack
      - ParentAuthProxyStack
      - ParentAlertStack
    - Label:
        default: 'VPC'
      Parameters:
      - VpcId
      - PublicSubnetA
      - PublicSubnetB
      - PrivateSubnetA
      - PrivateSubnetB
    - Label:
        default: 'Domain Name and SSL certificates'
      Parameters:
      - ElbAcmCertificate
    - Label:
        default: 'EC2 Parameters'
      Parameters:
      - AMI
      - ConfigBucket
      - WebServerSystemsManagerAccess
      - WebServerInstanceType
      - WebServerLogsRetentionInDays
    - Label:
        default: 'EFS Parameters'
      Parameters:
      - EFSProvisionedThroughputInMibps
    - Label:
        default: 'Database Parameters'
      Parameters:
      - DBServerInstanceType
      - DBBackupRetentionPeriod
      - DBBacktrackWindow
      - DBKmsKey
      - DBMasterPassword
Parameters:
  ParentSSHBastionStack:
    Description: 'Optional but recommended stack name of parent SSH bastion host/instance stack based on vpc/vpc-*-bastion.yaml template.'
    Type: String
    Default: ''
  ParentAuthProxyStack:
    Description: 'Optional stack name of parent auth proxy stack based on security/auth-proxy-*.yaml template.'
    Type: String
    Default: ''
  ParentAlertStack:
    Description: 'Optional but recommended stack name of parent alert stack based on operations/alert.yaml template.'
    Type: String
    Default: ''
  VpcId:
    Description: 'VPC ID'
    Type: String
  PublicSubnetA:
    Description: 'Public Subnet A'
    Type: String
  PublicSubnetB:
    Description: 'Public Subnet B'
    Type: String
  PrivateSubnetA:
    Description: 'Private Subnet A'
    Type: String
  PrivateSubnetB:
    Description: 'Private Subnet B'
    Type: String
  ElbAcmCertificate:
    Description: 'The ACM Certificate ARN for the ELB. Must be created in the same region as this stack!'
    Type: String
  AMI:
    Description: 'Amazon Machine Image ID'
    Type: AWS::EC2::Image::Id
    Default: ''
  ConfigBucket:
    Description: 'The name of an S3 bucket containing EC2 configuration files'
    Type: String
    Default: ''
  WebServerSystemsManagerAccess:
    Description: 'Enable AWS Systems Manager agent and authorization.'
    Type: String
    Default: true
    AllowedValues:
    - true
    - false
  WebServerInstanceType:
    Description: 'The instance type of web servers (e.g. t2.micro).'
    Type: String
    Default: 't2.micro'
  WebServerLogsRetentionInDays:
    Description: 'Specifies the number of days you want to retain log events.'
    Type: Number
    Default: 14
    AllowedValues: [1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827, 3653]
  EFSProvisionedThroughputInMibps:
    Description: 'The provisioned throughput for the Elastic File System (EFS) in Mibps. Default is 0 which enables the bursting mode and disables provisioned throughput.'
    Type: Number
    Default: 0
  DBServerInstanceType:
    Description: 'The instance type of database server (e.g. db.t2.small).'
    Type: String
    Default: 'db.t2.small'
  DBBackupRetentionPeriod:
    Description: 'The number of days to keep snapshots of the database.'
    Type: Number
    Default: 30
    Type: String
  DBBacktrackWindow:
    Description: 'The number of hours for the backtrack window.'
    Type: Number
    Default: 24
    MinValue: 1
    MaxValue: 72
  DBKmsKey:
    Description: 'The ARN of the KMS key used to encrypt aurora cluster.'
    Type: String
  DBMasterPassword:
    Description: 'The Name of an SSM parameter store key containing the master password for the aurora cluster.'
    Type: 'AWS::SSM::Parameter::Name'

Conditions:
  HasSystemsManagerAccess: !Equals [!Ref WebServerSystemsManagerAccess, 'true']
  HasSSHBastionSecurityGroup: !Not [!Equals [!Ref ParentSSHBastionStack, '']]
  HasAuthProxySecurityGroup: !Not [!Equals [!Ref ParentAuthProxyStack, '']]
  HasNotAuthProxySecurityGroup: !Equals [!Ref ParentAuthProxyStack, '']
  HasAlertTopic: !Not [!Equals [!Ref ParentAlertStack, '']]
  HasEFSProvisionedThroughput: !Not [!Equals [!Ref EFSProvisionedThroughputInMibps, '0']]
  HasNotEFSProvisionedThroughput: !Equals [!Ref EFSProvisionedThroughputInMibps, '0']
  HasAlertTopicAndEFSProvisionedThroughput: !And [!Condition HasAlertTopic, !Condition HasEFSProvisionedThroughput]
  HasAlertTopicAndNotEFSProvisionedThroughput: !And [!Condition HasAlertTopic, !Condition HasNotEFSProvisionedThroughput]
Resources:
  WebServerLogs:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      RetentionInDays: !Ref WebServerLogsRetentionInDays
  LoadBalancerSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'wordpress-elb'
      VpcId: !Ref VpcId
  LoadBalancerSecurityGroupInWorld:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Condition: HasNotAuthProxySecurityGroup
    Properties:
      GroupId: !Ref LoadBalancerSecurityGroup
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
      CidrIp: '0.0.0.0/0'
  LoadBalancerSecurityGroupInAuthProxy:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Condition: HasAuthProxySecurityGroup
    Properties:
      GroupId: !Ref LoadBalancerSecurityGroup
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      SourceSecurityGroupId: {'Fn::ImportValue': !Sub '${ParentAuthProxyStack}-SecurityGroup'}
  WebServerSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'wordpress-ec2'
      VpcId: !Ref VpcId
      SecurityGroupIngress:
      - FromPort: 80
        IpProtocol: tcp
        SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
        ToPort: 80
  DatabaseSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'wordpress-rds'
      VpcId: !Ref VpcId
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 3306
        ToPort: 3306
        SourceSecurityGroupId: !Ref WebServerSecurityGroup
  DatabaseSecurityGroupInSSHBastion:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Condition: HasSSHBastionSecurityGroup
    Properties:
      GroupId: !Ref DatabaseSecurityGroup
      IpProtocol: tcp
      FromPort: 3306
      ToPort: 3306
      SourceSecurityGroupId: {'Fn::ImportValue': !Sub '${ParentSSHBastionStack}-SecurityGroup'}
  HTTPCodeELB5XXTooHighAlarm:
    Condition: HasAlertTopic
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: 'Elastic load balancer returns 5XX HTTP status codes'
      Namespace: 'AWS/ApplicationELB'
      MetricName: HTTPCode_ELB_5XX_Count
      Statistic: Sum
      Period: 60
      EvaluationPeriods: 1
      ComparisonOperator: GreaterThanThreshold
      Threshold: 0
      AlarmActions:
      - {'Fn::ImportValue': !Sub '${ParentAlertStack}-TopicARN'}
      Dimensions:
      - Name: LoadBalancer
        Value: !GetAtt LoadBalancer.LoadBalancerFullName
  HTTPCodeTarget5XXTooHighAlarm:
    Condition: HasAlertTopic
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: 'Elastic load balancer receives 5XX HTTP status codes from backends'
      Namespace: 'AWS/ApplicationELB'
      MetricName: HTTPCode_Target_5XX_Count
      Statistic: Sum
      Period: 60
      EvaluationPeriods: 1
      ComparisonOperator: GreaterThanThreshold
      Threshold: 0
      AlarmActions:
      - {'Fn::ImportValue': !Sub '${ParentAlertStack}-TopicARN'}
      Dimensions:
      - Name: LoadBalancer
        Value: !GetAtt LoadBalancer.LoadBalancerFullName
  RejectedConnectionCountTooHighAlarm:
    Condition: HasAlertTopic
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: 'Application load balancer rejected connections because the load balancer had reached its maximum number of connections'
      Namespace: 'AWS/ApplicationELB'
      MetricName: RejectedConnectionCount
      Statistic: Sum
      Period: 60
      EvaluationPeriods: 1
      ComparisonOperator: GreaterThanThreshold
      Threshold: 0
      AlarmActions:
      - {'Fn::ImportValue': !Sub '${ParentAlertStack}-TopicARN'}
      Dimensions:
      - Name: LoadBalancer
        Value: !GetAtt LoadBalancer.LoadBalancerFullName
  TargetConnectionErrorCountTooHighAlarm:
    Condition: HasAlertTopic
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: 'Application load balancer could not connect to targets'
      Namespace: 'AWS/ApplicationELB'
      MetricName: TargetConnectionErrorCount
      Statistic: Sum
      Period: 60
      EvaluationPeriods: 1
      ComparisonOperator: GreaterThanThreshold
      Threshold: 0
      AlarmActions:
      - {'Fn::ImportValue': !Sub '${ParentAlertStack}-TopicARN'}
      Dimensions:
      - Name: LoadBalancer
        Value: !GetAtt LoadBalancer.LoadBalancerFullName
  LoadBalancer:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Subnets:
      - !Ref PublicSubnetA
      - !Ref PublicSubnetB
      SecurityGroups:
      - !Ref LoadBalancerSecurityGroup
      LoadBalancerAttributes:
      - Key: idle_timeout.timeout_seconds
        Value: '120'
      Scheme: 'internet-facing'
  LoadBalancerListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref LoadBalancerTargetGroup
      LoadBalancerArn: !Ref LoadBalancer
      Port: 443
      Protocol: HTTPS
      Certificates:
      - CertificateArn: !Ref ElbAcmCertificate
  LoadBalancerTargetGroup: # not monitored, but LoadBalancer is monitored!
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      HealthCheckIntervalSeconds: 15
      HealthCheckPath: '/'
      HealthCheckPort: '80'
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      Matcher:
        HttpCode: '200-299'
      Port: 80
      Protocol: HTTP
      VpcId: !Ref VpcId
      TargetGroupAttributes:
      - Key: 'deregistration_delay.timeout_seconds'
        Value: 180
      - Key: 'stickiness.enabled'
        Value: true
      - Key: 'stickiness.lb_cookie.duration_seconds'
        Value: 600
      - Key: 'stickiness.type'
        Value: 'lb_cookie'
  DBSubnetGroup:
    Type: 'AWS::RDS::DBSubnetGroup'
    Properties:
      DBSubnetGroupDescription: 'DB subnet group'
      SubnetIds:
      - !Ref PrivateSubnetA
      - !Ref PrivateSubnetB
  EncryptedDatabaseCluster:
    Type: 'AWS::RDS::DBCluster'
    Properties:
      BackupRetentionPeriod: !Ref DBBackupRetentionPeriod
      BacktrackWindow: !Ref DBBacktrackWindow
      DatabaseName: wordpress
      DBSubnetGroupName: !Ref DBSubnetGroup
      Engine: aurora
      MasterUsername: cphwordpress
      MasterUserPassword: !Sub "{{resolve:ssm-secure:${DBMasterPassword}:1}}"
      KmsKeyId: !Ref DBKmsKey
      StorageEncrypted: true
      VpcSecurityGroupIds:
      - !Ref DatabaseSecurityGroup
  DatabaseClusterBurstBalanceTooLowAlarm:
    Condition: HasAlertTopic
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: 'Average database cluster storage burst balance over last 10 minutes lower than 20%, expect a significant performance drop soon'
      Namespace: 'AWS/RDS'
      MetricName: BurstBalance
      Statistic: Average
      Period: 600
      EvaluationPeriods: 1
      ComparisonOperator: LessThanThreshold
      Threshold: 20
      AlarmActions:
      - {'Fn::ImportValue': !Sub '${ParentAlertStack}-TopicARN'}
      Dimensions:
      - Name: DBClusterIdentifier
        Value: !Ref EncryptedDatabaseCluster
  DatabaseClusterCPUUtilizationTooHighAlarm:
    Condition: HasAlertTopic
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: 'Average database cluster CPU utilization over last 10 minutes higher than 80%'
      Namespace: 'AWS/RDS'
      MetricName: CPUUtilization
      Statistic: Average
      Period: 600
      EvaluationPeriods: 1
      ComparisonOperator: GreaterThanThreshold
      Threshold: 80
      AlarmActions:
      - {'Fn::ImportValue': !Sub '${ParentAlertStack}-TopicARN'}
      Dimensions:
      - Name: DBClusterIdentifier
        Value: !Ref EncryptedDatabaseCluster
  DatabaseClusterDiskQueueDepthTooHighAlarm:
    Condition: HasAlertTopic
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: 'Average database cluster disk queue depth over last 10 minutes higher than 64, performance may suffer'
      Namespace: 'AWS/RDS'
      MetricName: DiskQueueDepth
      Statistic: Average
      Period: 600
      EvaluationPeriods: 1
      ComparisonOperator: GreaterThanThreshold
      Threshold: 64
      AlarmActions:
      - {'Fn::ImportValue': !Sub '${ParentAlertStack}-TopicARN'}
      Dimensions:
      - Name: DBClusterIdentifier
        Value: !Ref EncryptedDatabaseCluster
  DatabaseClusterFreeableMemoryTooLowAlarm:
    Condition: HasAlertTopic
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: 'Average database cluster freeable memory over last 10 minutes lower than 64 MB, performance may suffer'
      Namespace: 'AWS/RDS'
      MetricName: FreeableMemory
      Statistic: Average
      Period: 600
      EvaluationPeriods: 1
      ComparisonOperator: LessThanThreshold
      Threshold: 67108864 # 64 MB in Bytes
      AlarmActions:
      - {'Fn::ImportValue': !Sub '${ParentAlertStack}-TopicARN'}
      Dimensions:
      - Name: DBClusterIdentifier
        Value: !Ref EncryptedDatabaseCluster
  DatabaseClusterFreeStorageSpaceTooLowAlarm:
    Condition: HasAlertTopic
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: 'Average database cluster free storage space over last 10 minutes lower than 2 GB'
      Namespace: 'AWS/RDS'
      MetricName: FreeStorageSpace
      Statistic: Average
      Period: 600
      EvaluationPeriods: 1
      ComparisonOperator: LessThanThreshold
      Threshold: 2147483648 # 2 GB in Bytes
      AlarmActions:
      - {'Fn::ImportValue': !Sub '${ParentAlertStack}-TopicARN'}
      Dimensions:
      - Name: DBClusterIdentifier
        Value: !Ref EncryptedDatabaseCluster
  DatabaseClusterSwapUsageTooHighAlarm:
    Condition: HasAlertTopic
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: 'Average database cluster swap usage over last 10 minutes higher than 256 MB, performance may suffer'
      Namespace: 'AWS/RDS'
      MetricName: SwapUsage
      Statistic: Average
      Period: 600
      EvaluationPeriods: 1
      ComparisonOperator: GreaterThanThreshold
      Threshold: 268435456 # 256 MB in Bytes
      AlarmActions:
      - {'Fn::ImportValue': !Sub '${ParentAlertStack}-TopicARN'}
      Dimensions:
      - Name: DBClusterIdentifier
        Value: !Ref EncryptedDatabaseCluster
  EncryptedDatabaseA:
    Type: 'AWS::RDS::DBInstance'
    Properties:
      DBClusterIdentifier: !Ref EncryptedDatabaseCluster
      DBInstanceClass: !Ref DBServerInstanceType
      Engine: aurora
      DBSubnetGroupName: !Ref DBSubnetGroup
  EncryptedDatabaseB:
    Type: 'AWS::RDS::DBInstance'
    Properties:
      DBClusterIdentifier: !Ref EncryptedDatabaseCluster
      DBInstanceClass: !Ref DBServerInstanceType
      Engine: aurora
      DBSubnetGroupName: !Ref DBSubnetGroup
  WebServerInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: '/'
      Roles:
      - !Ref WebServerIAMRole
  WebServerIAMRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - 'ec2.amazonaws.com'
          Action:
          - 'sts:AssumeRole'
      Path: '/'
      ManagedPolicyArns: !If [HasSystemsManagerAccess, ['arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM'], []] # TODO get rid of managed policy
      Policies:
      - PolicyName: logs
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - 'logs:CreateLogStream'
            - 'logs:PutLogEvents'
            - 'logs:DescribeLogStreams'
            Resource: !GetAtt 'WebServerLogs.Arn'
      - PolicyName: metrics
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - 'cloudwatch:PutMetricData'
            - 'cloudwatch:GetMetricStatistics'
            - 'cloudwatch:ListMetrics'
            Resource: !GetAtt 'WebServerLogs.Arn'
          - Effect: Allow
            Action:
            - 'ec2:DescribeTags'
            Resource: '*'
  LaunchConfiguration:
    DependsOn: [EncryptedDatabaseA, EncryptedDatabaseB]
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Metadata:
      'AWS::CloudFormation::Init':
        configSets:
          default: [shibboleth, config, cloudwatchagent]
        shibboleth:
          services:
            sysvinit:
                shibd:
                  enabled: true
                  ensureRunning: true
        config:
          files:
            '/root/initialize_docroots.sh':
              content: !Sub |
                #!/bin/bash -ex
                # detect virtual host document roots and initialize them if they do not exist
                vhost_docroots=$(grep -roPh '[^#+][[:space:]]*DocumentRoot \"\K([^\0]+)(?=\")' /etc/httpd/conf.d/*.conf /etc/httpd/conf.d/prod/*.conf /etc/httpd/conf.d/test/*.conf /etc/httpd/conf/httpd.conf)
                for i in $vhost_docroots; do
                    if [ ! -d $i ]; then
                        /usr/bin/mkdir -p $i
                        chown apache:webadmins $i
                        chmod 775 $i
                    fi
                done
              mode: '000550'
              owner: root
              group: root
            '/root/.htaccess':
              content: |
                # BEGIN WordPress
                <IfModule mod_rewrite.c>
                  RewriteEngine On
                  RewriteBase /
                  RewriteRule ^index\.php$ - [L]
                  RewriteCond %{REQUEST_FILENAME} !-f
                  RewriteCond %{REQUEST_FILENAME} !-d
                  RewriteCond %{REQUEST_URI} !^/?Shibboleth.sso
                  RewriteRule . /index.php [L]
                </IfModule>
                # END WordPress
                # BEGIN Shibboleth
                <RequireAll>
                  AuthType shibboleth
                  ShibRequestSetting requireSession false
                  Require shibboleth
                </RequireAll>
                # END Shibboleth
                # START cache-control
                <IfModule mod_expires.c>
                  # Enable Expiration
                  ExpiresActive on
                  # Default Directive
                  ExpiresDefault "access plus 1 month"
                  # Favicon
                  ExpiresByType image/x-ico "access plus 1 month"
                  ExpiresByType image/x-icon "access plus 1 month"
                  # Images
                  ExpiresByType image/gif "access plus 1 month"
                  ExpiresByType image/png "access plus 1 month"
                  ExpiresByType image/jpg "access plus 1 month"
                  ExpiresByType image/jpeg "access plus 1 month"
                  # TEXT/Wording/RSS Feed
                  ExpiresByType text/html "access plus 1 week"
                  ExpiresByType text/xml "access plus 1 seconds"
                  ExpiresByType text/plain "access plus 1 seconds"
                  ExpiresByType application/xml "access plus 1 seconds"
                  ExpiresByType application/rss+xml "access plus 1 seconds"
                  ExpiresByType application/json "access plus 1 seconds"
                  ExpiresByType image/svg+xml "access plus 1 week"
                  # CSS Stylesheet
                  ExpiresByType text/css "access plus 1 week"
                  # JavaScripts
                  ExpiresByType text/javascript "access plus 1 week"
                  ExpiresByType application/javascript "access plus 1 week"
                  ExpiresByType application/x-javascript "access plus 1 week"
                  # PDF files
                  ExpiresByType application/pdf "access plus 1 month"
                  # The next few lines remove the Last-Modified, Pragma, and ETag Headers
                  <IfModule mod_headers.c>
                    Header append Cache-Control "must-revalidate"
                  </IfModule>
                </IfModule>
                # END cache-control
              mode: '000664'
              owner: root
              group: root
            '/root/wordpress.sh':
              content: |
                #!/bin/bash -ex
                # Verify that all PHP scripts in the include path pass a syntax check
                for i in /usr/share/php/*.php; do 
                  php -l $i;
                  exit_code=$?
                  if [ "$exit_code" != "0" ]; then
                    echo "Exiting, syntax errors found in $i"
                    exit $exit_code
                  fi
                done
                # ensure that only one machine installs wp
                if mkdir /var/www/lock; then
                  cd /tmp
                  wget -q -T 60 https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar
                  for d in /var/www/*; do
                    if [ $d != '/var/www/healthcheck' ] && [ $d != '/var/www/lock' ]; then
                      cd $d
                      if ! php /tmp/wp-cli.phar core is-installed --allow-root; then
                        dname=$(basename $d)
                        if php /tmp/wp-cli.phar core download --allow-root; then
                          chown -R apache:webadmins $d
                          find . -type f -exec chmod 664 {} +
                          find . -type d -exec chmod 775 {} +
                          find . -type d -exec chmod g+s {} +
                        fi
                      fi
                      if [ -f $d/wp-config.php ]; then
                        chmod 660 $d/wp-config.php
                      fi
                      if [ ! -f $d/.htaccess ]; then
                        # copy over default .htaccess
                        cp /root/.htaccess $d/.htaccess
                        chown apache:webadmins $d/.htaccess
                        chmod 664 $d/.htaccess
                      fi
                    fi
                  done
                  rm -f /tmp/wp-cli.phar
                fi
                rm -rf /var/www/lock
              mode: '000550'
              owner: root
              group: root 
          commands:
            'a_execute_document_roots_script':
              command: '/root/initialize_docroots.sh'
            'b_download_wordpress':
              command: '/root/wordpress.sh'
          services:
            sysvinit:
              httpd:
                enabled: true
                ensureRunning: true
                commands:
                - 'a_execute_document_roots_script'
                - 'b_download_wordpress'
              php-fpm:
                enabled: true
                ensureRunning: true
              amazon-ssm-agent:
                enabled: !If [HasSystemsManagerAccess, true, false]
                ensureRunning: !If [HasSystemsManagerAccess, true, false]
        cloudwatchagent:
          commands:
            'a_start_cloudwatch_agent':
              command: '/opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -c file://opt/aws/amazon-cloudwatch-agent/etc/config.json -s'
          services:
            sysvinit:
              amazon-cloudwatch-agent:
                enabled: true
                ensureRunning: true
              awslogsd:
                enabled: true
                ensureRunning: true
    Properties:
      AssociatePublicIpAddress: true
      IamInstanceProfile: !Ref WebServerInstanceProfile
      ImageId: !Ref AMI
      InstanceType: !Ref WebServerInstanceType
      SecurityGroups:
      - !Ref WebServerSecurityGroup
      UserData:
        'Fn::Base64': !Sub |
          #!/bin/bash -ex
          trap '/opt/aws/bin/cfn-signal -e 1 --stack ${AWS::StackName} --resource AutoScalingGroup --region ${AWS::Region}' ERR
          while ! (echo > /dev/tcp/${EFSFileSystem}.efs.${AWS::Region}.amazonaws.com/2049) >/dev/null 2>&1; do sleep 10; done
          sleep 10
          systemctl start cachefilesd
          systemctl enable cachefilesd
          mkdir -p /var/www
          mount -t nfs4 -o nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2,fsc "${EFSFileSystem}.efs.${AWS::Region}.amazonaws.com:/" /var/www/
          systemctl restart cachefilesd
          /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource LaunchConfiguration --region ${AWS::Region}
          /opt/aws/bin/cfn-signal -e 0 --stack ${AWS::StackName} --resource AutoScalingGroup --region ${AWS::Region}
  AutoScalingGroup:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    DependsOn:
    - EFSMountTargetA
    - EFSMountTargetB
    Properties:
      TargetGroupARNs:
      - !Ref LoadBalancerTargetGroup
      LaunchConfigurationName: !Ref LaunchConfiguration
      MinSize: '2'
      MaxSize: '4'
      DesiredCapacity: '2'
      Cooldown: '60'
      HealthCheckGracePeriod: 300
      HealthCheckType: ELB
      NotificationConfigurations: !If
      - HasAlertTopic
      - - NotificationTypes:
          - 'autoscaling:EC2_INSTANCE_LAUNCH_ERROR'
          - 'autoscaling:EC2_INSTANCE_TERMINATE_ERROR'
          TopicARN: {'Fn::ImportValue': !Sub '${ParentAlertStack}-TopicARN'}
      - []
      VPCZoneIdentifier:
      - !Ref PublicSubnetA
      - !Ref PublicSubnetB
      TerminationPolicies:
      - OldestLaunchConfiguration
      - OldestInstance
      - Default
      Tags:
      - PropagateAtLaunch: true
        Value: wordpress
        Key: Name
    CreationPolicy:
      ResourceSignal:
        Timeout: PT30M
    UpdatePolicy:
      AutoScalingRollingUpdate:
        PauseTime: PT30M
        SuspendProcesses:
        - HealthCheck
        - ReplaceUnhealthy
        - AZRebalance
        - AlarmNotification
        - ScheduledActions
        WaitOnResourceSignals: true
  CPUTooHighAlarm:
    Condition: HasAlertTopic
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: 'Average CPU utilization over last 10 minutes higher than 80%'
      Namespace: 'AWS/EC2'
      MetricName: CPUUtilization
      Statistic: Average
      Period: 600
      EvaluationPeriods: 1
      ComparisonOperator: GreaterThanThreshold
      Threshold: 80
      AlarmActions:
      - {'Fn::ImportValue': !Sub '${ParentAlertStack}-TopicARN'}
      Dimensions:
      - Name: AutoScalingGroupName
        Value: !Ref AutoScalingGroup
  ScalingUpPolicy:
    Type: 'AWS::AutoScaling::ScalingPolicy'
    Properties:
      AdjustmentType: PercentChangeInCapacity
      MinAdjustmentMagnitude: 1
      AutoScalingGroupName: !Ref AutoScalingGroup
      Cooldown: '900'
      ScalingAdjustment: 25
  CPUHighAlarm:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      EvaluationPeriods: 1
      Statistic: Average
      Threshold: 60
      AlarmDescription: 'Alarm if CPU load is high.'
      Period: 300
      AlarmActions:
      - !Ref ScalingUpPolicy
      Namespace: 'AWS/EC2'
      Dimensions:
      - Name: AutoScalingGroupName
        Value: !Ref AutoScalingGroup
      ComparisonOperator: GreaterThanThreshold
      MetricName: CPUUtilization
  ScalingDownPolicy:
    Type: 'AWS::AutoScaling::ScalingPolicy'
    Properties:
      AdjustmentType: PercentChangeInCapacity
      MinAdjustmentMagnitude: 1
      AutoScalingGroupName: !Ref AutoScalingGroup
      Cooldown: '300'
      ScalingAdjustment: -25
  CPULowAlarm:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      EvaluationPeriods: 3
      Statistic: Average
      Threshold: 30
      AlarmDescription: 'Alarm if CPU load is low.'
      Period: 300
      AlarmActions:
      - !Ref ScalingDownPolicy
      Namespace: 'AWS/EC2'
      Dimensions:
      - Name: AutoScalingGroupName
        Value: !Ref AutoScalingGroup
      ComparisonOperator: LessThanThreshold
      MetricName: CPUUtilization
  EFSFileSystem:
    Type: 'AWS::EFS::FileSystem'
    Properties:
      ThroughputMode: !If [HasEFSProvisionedThroughput, 'provisioned', 'bursting']
      ProvisionedThroughputInMibps: !If [HasEFSProvisionedThroughput, !Ref EFSProvisionedThroughputInMibps, !Ref 'AWS::NoValue']
      FileSystemTags:
      - Key: Name
        Value: !Sub '${AWS::StackName}-efs'
  EFSFileSystemBurstCreditBalanceTooLowAlarm:
    Condition: HasAlertTopicAndNotEFSProvisionedThroughput
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: 'EFS file system is running out of burst credits. You can expect a significant performance drop in the next hour.'
      Namespace: 'AWS/EFS'
      MetricName: BurstCreditBalance
      Statistic: Average
      Period: 600
      EvaluationPeriods: 1
      ComparisonOperator: LessThanThreshold
      Threshold: 192416666667 # 192 GB in Bytes (last hour where you can burst at 100 MB/sec)
      AlarmActions:
      - {'Fn::ImportValue': !Sub '${ParentAlertStack}-TopicARN'}
      Dimensions:
      - Name: FileSystemId
        Value: !Ref EFSFileSystem
  EFSFileSystemThroughputAlarm:
    Condition: HasAlertTopicAndEFSProvisionedThroughput
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: 'Reached 90% of the provisioned throughput within a period of 10 minutes.'
      Namespace: 'AWS/EFS'
      MetricName: TotalIOBytes
      Statistic: Sum
      Period: 600
      EvaluationPeriods: 1
      ComparisonOperator: GreaterThanThreshold
      Threshold: !GetAtt MaxThroughputCalculator.Threshold
      AlarmActions:
      - {'Fn::ImportValue': !Sub '${ParentAlertStack}-TopicARN'}
      Dimensions:
      - Name: FileSystemId
        Value: !Ref EFSFileSystem
  EFSMountTargetA:
    Type: 'AWS::EFS::MountTarget'
    Properties:
      FileSystemId: !Ref EFSFileSystem
      SubnetId: !Ref PublicSubnetA
      SecurityGroups:
      - !Ref EFSSecurityGroup
  EFSMountTargetB:
    Type: 'AWS::EFS::MountTarget'
    Properties:
      FileSystemId: !Ref EFSFileSystem
      SubnetId: !Ref PublicSubnetB
      SecurityGroups:
      - !Ref EFSSecurityGroup
  EFSSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Allowing access to EFS
      VpcId: !Ref VpcId
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 2049
        ToPort: 2049
        SourceSecurityGroupId: !Ref WebServerSecurityGroup
  LambdaRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: 'lambda.amazonaws.com'
          Action:
          - 'sts:AssumeRole'
      Path: '/'
      ManagedPolicyArns:
      - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
  LambdaFunction: # needs no monitoring because it is used as a custom resource
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        ZipFile: |
          'use strict';
          const response = require('cfn-response');
          exports.handler = (event, context, cb) => {
            const throughput = parseInt(event.ResourceProperties.ThroughputInMibps, 10);
            const threshold = Math.round(throughput * 1048576 * 600 * 0.9);
            response.send(event, context, response.SUCCESS, {Threshold: threshold});
          };
      Handler: 'index.handler'
      MemorySize: 128
      Role: !GetAtt 'LambdaRole.Arn'
      Runtime: 'nodejs6.10'
      Timeout: 60
  LambdaLogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: !Sub '/aws/lambda/${LambdaFunction}'
      RetentionInDays: !Ref WebServerLogsRetentionInDays
  MaxThroughputCalculator:
    Type: 'Custom::MaxThroughputCalculator'
    DependsOn: LambdaLogGroup
    Version: '1.0'
    Properties:
      ThroughputInMibps: !Ref EFSProvisionedThroughputInMibps
      ServiceToken: !GetAtt 'LambdaFunction.Arn'
Outputs:
  TemplateID:
    Description: 'cloudonaut.io template id.'
    Value: 'wordpress/wordpress-ha-aurora'
  TemplateVersion:
    Description: 'cloudonaut.io template version.'
    Value: '__VERSION__'
  StackName:
    Description: 'Stack name.'
    Value: !Sub '${AWS::StackName}'
